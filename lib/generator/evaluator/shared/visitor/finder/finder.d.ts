import type { TmplAstElement, TmplAstTemplate, TmplAstDeferredBlock, TmplAstDeferredBlockPlaceholder, TmplAstDeferredBlockError, TmplAstDeferredBlockLoading, TmplAstSwitchBlock, TmplAstSwitchBlockCase, TmplAstForLoopBlock, TmplAstForLoopBlockEmpty, TmplAstIfBlock, TmplAstIfBlockBranch, TmplAstContent, TmplAstVariable, TmplAstReference, TmplAstTextAttribute, TmplAstBoundAttribute, TmplAstBoundEvent, TmplAstText, TmplAstBoundText, TmplAstIcu, TmplAstDeferredTrigger, TmplAstUnknownBlock, TmplAstLetDeclaration } from "@angular/compiler";
import { TmplAstRecursiveVisitor } from "@angular/compiler";
export declare abstract class Finder extends TmplAstRecursiveVisitor {
    protected _hasFound: boolean;
    get hasFound(): boolean;
    visitElement(element: TmplAstElement): void;
    visitTemplate(template: TmplAstTemplate): void;
    visitDeferredBlock(deferred: TmplAstDeferredBlock): void;
    visitDeferredBlockPlaceholder(block: TmplAstDeferredBlockPlaceholder): void;
    visitDeferredBlockError(block: TmplAstDeferredBlockError): void;
    visitDeferredBlockLoading(block: TmplAstDeferredBlockLoading): void;
    visitSwitchBlock(block: TmplAstSwitchBlock): void;
    visitSwitchBlockCase(block: TmplAstSwitchBlockCase): void;
    visitForLoopBlock(block: TmplAstForLoopBlock): void;
    visitForLoopBlockEmpty(block: TmplAstForLoopBlockEmpty): void;
    visitIfBlock(block: TmplAstIfBlock): void;
    visitIfBlockBranch(block: TmplAstIfBlockBranch): void;
    visitContent(content: TmplAstContent): void;
    visitVariable(variable: TmplAstVariable): void;
    visitReference(reference: TmplAstReference): void;
    visitTextAttribute(attribute: TmplAstTextAttribute): void;
    visitBoundAttribute(attribute: TmplAstBoundAttribute): void;
    visitBoundEvent(attribute: TmplAstBoundEvent): void;
    visitText(text: TmplAstText): void;
    visitBoundText(text: TmplAstBoundText): void;
    visitIcu(icu: TmplAstIcu): void;
    visitDeferredTrigger(trigger: TmplAstDeferredTrigger): void;
    visitUnknownBlock(block: TmplAstUnknownBlock): void;
    visitLetDeclaration(decl: TmplAstLetDeclaration): void;
}
